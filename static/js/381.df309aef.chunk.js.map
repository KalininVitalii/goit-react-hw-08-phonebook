{"version":3,"file":"static/js/381.df309aef.chunk.js","mappings":"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","sources":["components/Section/Section.jsx","components/AddForm/ContactForm.styled.jsx","redux/contact-selectors.js","components/AddForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/UpdateForm/UpdateForm.jsx","components/ContactList/ContactList.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const Section = ({ children }) => {\n  return (\n    <section>\n      <div>{children}</div>\n    </section>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  font-size: 20px;\n  font-weight: 500;\n  margin: 10px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  margin: 10px;\n  font-size: 20px;\n`;\n\nexport const Input = styled.input`\n  display: flex;\n  margin: 10px;\n  padding-left: 16px;\n  width: 200px;\n  height: 30px;\n  font-size: 18px;\n  border-radius: 4px;\n`;\nexport const Button = styled.button`\n  &:hover,\n  &:focus {\n    background-color: #2196f3;\n    color: white;\n    cursor: pointer;\n  }\n\n  border-radius: 4px;\n  padding: 5px;\n  font-weight: 500;\n  font-size: 18px;\n  margin: 15px;\n  text-align: center;\n  border: solid 1px black;\n  background-color: white;\n\n  -webkit-transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectedContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.users.isLoading;\nexport const selectedFilter = state => state.filter.filter;\nexport const selectVisibleContacts = createSelector(\n  [selectedContacts, selectedFilter],\n  (contacts, filter) =>\n    contacts.filter(({ name }) => name.toLowerCase().includes(filter))\n);\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, Button, Label, Input } from './ContactForm.styled';\nimport { addUser } from 'redux/operations';\nimport { selectedContacts } from 'redux/contact-selectors';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const contacts = useSelector(selectedContacts);\n  const dispatch = useDispatch();\n\n  const handleInput = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setPhone(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const newName = name.toLowerCase();\n    const notify = name => alert(`${name} is already in contacts`);\n    if (contacts.some(contact => contact.name.toLowerCase() === newName)) {\n      notify(name);\n      return;\n    }\n\n    dispatch(addUser({ name, phone }));\n\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleInput}\n          value={name}\n        />\n      </Label>\n      <Label>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"phone\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleInput}\n          value={phone}\n        />\n      </Label>\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  font-size: 20px;\n  margin: 10px;\n  font-weight: 400;\n`;\nexport const Input = styled.input`\n  display: flex;\n  margin: 10px;\n  padding-left: 16px;\n  width: 200px;\n  height: 30px;\n  font-size: 18px;\n  border-radius: 4px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { Label, Input } from './Filter.styled';\nimport { changeFilter } from 'redux/contacts-slice';\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const handleInput = event => {\n    const { value } = event.target;\n    dispatch(changeFilter(value.toLowerCase()));\n  };\n  return (\n    <>\n      <Label>Find contacts by name</Label>\n      <Input type=\"text\" onChange={handleInput} />\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.li`\n  font-size: 18px;\n  margin: 10px;\n`;\nexport const Button = styled.button`\n  &:hover,\n  &:focus {\n    background-color: #2196f3;\n    color: white;\n    cursor: pointer;\n  }\n\n  border-radius: 4px;\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 1.63;\n  text-align: center;\n  border: solid 1px black;\n  background-color: white;\n\n  -webkit-transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateUser } from 'redux/operations';\n\nexport const UpdateForm = ({ contact, closeForm }) => {\n  const [name, setName] = useState(contact.name);\n  const [phone, setPhone] = useState(contact.phone);\n\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setPhone(value);\n        break;\n      default:\n        break;\n    }\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch(updateUser({ ...contact, name, phone }));\n    closeForm();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Name:{' '}\n        <input type=\"text\" name=\"name\" onChange={handleChange} value={name} />\n      </label>\n      <label>\n        Phone:{' '}\n        <input\n          type=\"phone\"\n          name=\"phone\"\n          onChange={handleChange}\n          value={phone}\n        />\n      </label>\n      <button>Save</button>\n    </form>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport {\n  selectedContacts,\n  selectVisibleContacts,\n} from 'redux/contact-selectors';\nimport { deleteUser } from 'redux/operations';\nimport { List, Button } from './ContactList.styled';\nimport Avatar from 'react-avatar';\n\nimport { UpdateForm } from 'components/UpdateForm/UpdateForm';\n\nexport const ContactList = () => {\n  const [contactToUpdate, setContactToUpdate] = useState(null);\n  const visualContacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectedContacts);\n\n  const onDeleteBtnClick = contactId => {\n    dispatch(deleteUser(contactId));\n  };\n\n  const showUpdateForm = contactId => {\n    const contact = contacts.find(({ id }) => id === contactId);\n    setContactToUpdate(contact);\n  };\n\n  const closeUpdateForm = () => {\n    setContactToUpdate(null);\n  };\n\n  return (\n    <ul>\n      {visualContacts.map(({ id, name, phone }) => (\n        <List key={id}>\n          <span>\n            <Avatar round={true} size={25} name={name} />\n          </span>\n          <span>\n            {name}: {phone}\n          </span>\n          <Button\n            type=\"button\"\n            onClick={() => {\n              onDeleteBtnClick(id);\n            }}\n          >\n            Delete\n          </Button>\n          <Button\n            type=\"button\"\n            onClick={() => {\n              showUpdateForm(id);\n            }}\n          >\n            Update\n          </Button>\n          {contactToUpdate && contactToUpdate.id === id && (\n            <UpdateForm contact={contactToUpdate} closeForm={closeUpdateForm} />\n          )}\n        </List>\n      ))}\n    </ul>\n  );\n};\n","// import { useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\nimport { Section } from 'components/Section/Section';\nimport { ContactForm } from 'components/AddForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\n// import { fetchContacts } from 'redux/operations';\n\nconst ContactsPage = () => {\n  // const dispatch = useDispatch();\n\n  // useEffect(() => {\n  //   dispatch(fetchContacts());\n  // }, [dispatch]);\n\n  return (\n    <>\n      <Section>\n        <ContactForm />\n        <div>\n          <Filter />\n          <ContactList />\n        </div>\n      </Section>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["Section","children","Form","styled","Label","Input","Button","selectedContacts","state","contacts","items","selectVisibleContacts","createSelector","filter","name","toLowerCase","includes","ContactForm","useState","setName","phone","setPhone","useSelector","dispatch","useDispatch","handleInput","e","target","value","onSubmit","event","preventDefault","newName","some","contact","alert","notify","addUser","type","pattern","title","required","onChange","Filter","changeFilter","List","UpdateForm","closeForm","handleChange","updateUser","ContactList","contactToUpdate","setContactToUpdate","visualContacts","closeUpdateForm","map","id","round","size","onClick","contactId","deleteUser","find","showUpdateForm"],"sourceRoot":""}